{"/home/travis/build/npmtest/node-npmtest-create-react-app/test.js":"/* istanbul instrument in package npmtest_create_react_app */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-create-react-app/lib.npmtest_create_react_app.js":"/* istanbul instrument in package npmtest_create_react_app */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_create_react_app = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_create_react_app = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-create-react-app/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-create-react-app && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_create_react_app */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_create_react_app\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_create_react_app.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_create_react_app.rollup.js'] =\n            local.assetsDict['/assets.npmtest_create_react_app.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_create_react_app.__dirname + '/lib.npmtest_create_react_app.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-create-react-app/node_modules/create-react-app/index.js":"#!/usr/bin/env node\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//   /!\\ DO NOT MODIFY THIS FILE /!\\\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n// create-react-app is installed globally on people's computers. This means\n// that it is extremely difficult to have them upgrade the version and\n// because there's only one global version installed, it is very prone to\n// breaking changes.\n//\n// The only job of create-react-app is to init the repository and then\n// forward all the commands to the local version of create-react-app.\n//\n// If you need to add a new command, please add it to the scripts/ folder.\n//\n// The only reason to modify this file is to add more warnings and\n// troubleshooting information for the `create-react-app` command.\n//\n// Do not make breaking changes! We absolutely don't want to have to\n// tell people to update their global version of create-react-app.\n//\n// Also be careful with new language features.\n// This file must work on Node 0.10+.\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//   /!\\ DO NOT MODIFY THIS FILE /!\\\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n'use strict';\n\nvar chalk = require('chalk');\nvar validateProjectName = require(\"validate-npm-package-name\");\n\nvar currentNodeVersion = process.versions.node;\nif (currentNodeVersion.split('.')[0] < 4) {\n  console.error(\n    chalk.red(\n      'You are running Node ' + currentNodeVersion + '.\\n' +\n      'Create React App requires Node 4 or higher. \\n' +\n      'Please update your version of Node.'\n    )\n  );\n  process.exit(1);\n}\n\nvar commander = require('commander');\nvar fs = require('fs-extra');\nvar path = require('path');\nvar execSync = require('child_process').execSync;\nvar spawn = require('cross-spawn');\nvar semver = require('semver');\nvar dns = require('dns');\nvar tmp = require('tmp');\nvar unpack = require('tar-pack').unpack;\nvar hyperquest = require('hyperquest');\n\nvar projectName;\n\nvar program = commander\n  .version(require('./package.json').version)\n  .arguments('<project-directory>')\n  .usage(chalk.green('<project-directory>') + ' [options]')\n  .action(function (name) {\n    projectName = name;\n  })\n  .option('--verbose', 'print additional logs')\n  .option('--scripts-version <alternative-package>', 'use a non-standard version of react-scripts')\n  .allowUnknownOption()\n  .on('--help', function () {\n    console.log('    Only ' + chalk.green('<project-directory>') + ' is required.');\n    console.log();\n    console.log('    A custom ' + chalk.cyan('--scripts-version') + ' can be one of:');\n    console.log('      - a specific npm version: ' + chalk.green('0.8.2'));\n    console.log('      - a custom fork published on npm: ' + chalk.green('my-react-scripts'));\n    console.log('      - a .tgz archive: ' + chalk.green('https://mysite.com/my-react-scripts-0.8.2.tgz'));\n    console.log('    It is not needed unless you specifically want to use a fork.');\n    console.log();\n    console.log('    If you have any problems, do not hesitate to file an issue:');\n    console.log('      ' + chalk.cyan('https://github.com/facebookincubator/create-react-app/issues/new'));\n    console.log();\n  })\n  .parse(process.argv);\n\nif (typeof projectName === 'undefined') {\n  console.error('Please specify the project directory:');\n  console.log('  ' + chalk.cyan(program.name()) + chalk.green(' <project-directory>'));\n  console.log();\n  console.log('For example:');\n  console.log('  ' + chalk.cyan(program.name()) + chalk.green(' my-react-app'));\n  console.log();\n  console.log('Run ' + chalk.cyan(program.name() + ' --help') + ' to see all options.');\n  process.exit(1);\n}\n\nfunction printValidationResults(results) {\n  if (typeof results !== 'undefined') {\n    results.forEach(function (error) {\n      console.error(chalk.red('  * ' + error));\n    });\n  }\n}\n\nvar hiddenProgram = new commander.Command()\n  .option('--internal-testing-template <path-to-template>', '(internal usage only, DO NOT RELY ON THIS) ' +\n    'use a non-standard application template')\n  .parse(process.argv)\n\ncreateApp(projectName, program.verbose, program.scriptsVersion, hiddenProgram.internalTestingTemplate);\n\nfunction createApp(name, verbose, version, template) {\n  var root = path.resolve(name);\n  var appName = path.basename(root);\n\n  checkAppName(appName);\n  fs.ensureDirSync(name);\n  if (!isSafeToCreateProjectIn(root)) {\n    console.log('The directory ' + chalk.green(name) + ' contains files that could conflict.');\n    console.log('Try using a new directory name.');\n    process.exit(1);\n  }\n\n  console.log(\n    'Creating a new React app in ' + chalk.green(root) + '.'\n  );\n  console.log();\n\n  var packageJson = {\n    name: appName,\n    version: '0.1.0',\n    private: true\n  };\n  fs.writeFileSync(\n    path.join(root, 'package.json'),\n    JSON.stringify(packageJson, null, 2)\n  );\n  var originalDirectory = process.cwd();\n  process.chdir(root);\n\n  run(root, appName, version, verbose, originalDirectory, template);\n}\n\nfunction shouldUseYarn() {\n  try {\n    execSync('yarnpkg --version', {stdio: 'ignore'});\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction install(useYarn, dependencies, verbose, isOnline) {\n  return new Promise(function(resolve, reject) {\n    var command;\n    var args;\n    if (useYarn) {\n      command = 'yarnpkg';\n      args = [\n        'add',\n        '--exact',\n      ];\n      if (!isOnline) {\n        args.push('--offline');\n      }\n      [].push.apply(args, dependencies);\n\n      if (!isOnline) {\n        console.log(chalk.yellow('You appear to be offline.'));\n        console.log(chalk.yellow('Falling back to the local Yarn cache.'));\n        console.log();\n      }\n\n    } else {\n      checkNpmVersion();\n      command = 'npm';\n      args = ['install', '--save', '--save-exact'].concat(dependencies);\n    }\n\n    if (verbose) {\n      args.push('--verbose');\n    }\n\n    var child = spawn(command, args, {stdio: 'inherit'});\n    child.on('close', function(code) {\n      if (code !== 0) {\n        reject({\n          command: command + ' ' + args.join(' ')\n        });\n        return;\n      }\n      resolve();\n    });\n  });\n}\n\nfunction run(root, appName, version, verbose, originalDirectory, template) {\n  var packageToInstall = getInstallPackage(version);\n  var allDependencies = ['react', 'react-dom', packageToInstall];\n\n  console.log('Installing packages. This might take a couple minutes.');\n\n  var useYarn = shouldUseYarn();\n  getPackageName(packageToInstall)\n    .then(function(packageName) {\n      return checkIfOnline(useYarn).then(function(isOnline) {\n        return {\n          isOnline: isOnline,\n          packageName: packageName,\n        };\n      });\n    })\n    .then(function(info) {\n      var isOnline = info.isOnline;\n      var packageName = info.packageName;\n      console.log(\n        'Installing ' + chalk.cyan('react') + ', ' + chalk.cyan('react-dom') +\n        ', and ' + chalk.cyan(packageName) + '...'\n      );\n      console.log();\n\n      return install(useYarn, allDependencies, verbose, isOnline).then(function() {\n        return packageName;\n      });\n    })\n    .then(function(packageName) {\n      checkNodeVersion(packageName);\n\n      // Since react-scripts has been installed with --save\n      // we need to move it into devDependencies and rewrite package.json\n      // also ensure react dependencies have caret version range\n      fixDependencies(packageName);\n\n      var scriptsPath = path.resolve(\n        process.cwd(),\n        'node_modules',\n        packageName,\n        'scripts',\n        'init.js'\n      );\n      var init = require(scriptsPath);\n      init(root, appName, verbose, originalDirectory, template);\n    })\n    .catch(function(reason) {\n      console.log();\n      console.log('Aborting installation.');\n      if (reason.command) {\n        console.log('  ' + chalk.cyan(reason.command), 'has failed.')\n      } else {\n        console.log(chalk.red('Unexpected error. Please report it as a bug:'));\n        console.log(reason);\n      }\n      console.log();\n\n      // On 'exit' we will delete these files from target directory.\n      var knownGeneratedFiles = [\n        'package.json', 'npm-debug.log', 'yarn-error.log', 'yarn-debug.log', 'node_modules'\n      ];\n      var currentFiles = fs.readdirSync(path.join(root));\n      currentFiles.forEach(function (file) {\n        knownGeneratedFiles.forEach(function (fileToMatch) {\n          // This will catch `(npm-debug|yarn-error|yarn-debug).log*` files\n          // and the rest of knownGeneratedFiles.\n          if ((fileToMatch.match(/.log/g) && file.indexOf(fileToMatch) === 0) || file === fileToMatch) {\n            console.log('Deleting generated file...', chalk.cyan(file));\n            fs.removeSync(path.join(root, file));\n          }\n        });\n      });\n      var remainingFiles = fs.readdirSync(path.join(root));\n      if (!remainingFiles.length) {\n        // Delete target folder if empty\n        console.log('Deleting', chalk.cyan(appName + '/'), 'from', chalk.cyan(path.resolve(root, '..')));\n        process.chdir(path.resolve(root, '..'));\n        fs.removeSync(path.join(root));\n      }\n      console.log('Done.');\n      process.exit(1);\n    });\n}\n\nfunction getInstallPackage(version) {\n  var packageToInstall = 'react-scripts';\n  var validSemver = semver.valid(version);\n  if (validSemver) {\n    packageToInstall += '@' + validSemver;\n  } else if (version) {\n    // for tar.gz or alternative paths\n    packageToInstall = version;\n  }\n  return packageToInstall;\n}\n\nfunction getTemporaryDirectory() {\n  return new Promise(function(resolve, reject) {\n    // Unsafe cleanup lets us recursively delete the directory if it contains\n    // contents; by default it only allows removal if it's empty\n    tmp.dir({ unsafeCleanup: true }, function(err, tmpdir, callback) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({\n          tmpdir: tmpdir,\n          cleanup: function() {\n            try {\n              callback();\n            } catch (ignored) {\n              // Callback might throw and fail, since it's a temp directory the\n              // OS will clean it up eventually...\n            }\n          }\n        });\n      }\n    });\n  });\n}\n\nfunction extractStream(stream, dest) {\n  return new Promise(function(resolve, reject) {\n    stream.pipe(unpack(dest, function(err) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(dest);\n      }\n    }));\n  });\n}\n\n// Extract package name from tarball url or path.\nfunction getPackageName(installPackage) {\n  if (installPackage.indexOf('.tgz') > -1) {\n    return getTemporaryDirectory().then(function(obj) {\n      var stream;\n      if (/^http/.test(installPackage)) {\n        stream = hyperquest(installPackage);\n      } else {\n        stream = fs.createReadStream(installPackage);\n      }\n      return extractStream(stream, obj.tmpdir).then(function() {\n        return obj;\n      });\n    }).then(function(obj) {\n      var packageName = require(path.join(obj.tmpdir, 'package.json')).name;\n      obj.cleanup();\n      return packageName;\n    }).catch(function(err) {\n      // The package name could be with or without semver version, e.g. react-scripts-0.2.0-alpha.1.tgz\n      // However, this function returns package name only without semver version.\n      console.log('Could not extract the package name from the archive: ' + err.message);\n      var assumedProjectName = installPackage.match(/^.+\\/(.+?)(?:-\\d+.+)?\\.tgz$/)[1];\n      console.log('Based on the filename, assuming it is \"' + chalk.cyan(assumedProjectName) + '\"');\n      return Promise.resolve(assumedProjectName);\n    });\n  } else if (installPackage.indexOf('git+') === 0) {\n    // Pull package name out of git urls e.g:\n    // git+https://github.com/mycompany/react-scripts.git\n    // git+ssh://github.com/mycompany/react-scripts.git#v1.2.3\n    return Promise.resolve(installPackage.match(/([^\\/]+)\\.git(#.*)?$/)[1]);\n  } else if (installPackage.indexOf('@') > 0) {\n    // Do not match @scope/ when stripping off @version or @tag\n    return Promise.resolve(installPackage.charAt(0) + installPackage.substr(1).split('@')[0]);\n  }\n  return Promise.resolve(installPackage);\n}\n\nfunction checkNpmVersion() {\n  var isNpm2 = false;\n  try {\n    var npmVersion = execSync('npm --version').toString();\n    isNpm2 = semver.lt(npmVersion, '3.0.0');\n  } catch (err) {\n    return;\n  }\n  if (!isNpm2) {\n    return;\n  }\n  console.log(chalk.yellow('It looks like you are using npm 2.'));\n  console.log(chalk.yellow(\n    'We suggest using npm 3 or Yarn for faster install times ' +\n    'and less disk space usage.'\n  ));\n  console.log();\n}\n\nfunction checkNodeVersion(packageName) {\n  var packageJsonPath = path.resolve(\n    process.cwd(),\n    'node_modules',\n    packageName,\n    'package.json'\n  );\n  var packageJson = require(packageJsonPath);\n  if (!packageJson.engines || !packageJson.engines.node) {\n    return;\n  }\n\n  if (!semver.satisfies(process.version, packageJson.engines.node)) {\n    console.error(\n      chalk.red(\n        'You are running Node %s.\\n' +\n        'Create React App requires Node %s or higher. \\n' +\n        'Please update your version of Node.'\n      ),\n      process.version,\n      packageJson.engines.node\n    );\n    process.exit(1);\n  }\n}\n\nfunction checkAppName(appName) {\n  var validationResult = validateProjectName(appName);\n  if (!validationResult.validForNewPackages) {\n    console.error('Could not create a project called ' + chalk.red('\"' + appName + '\"') + ' because of npm naming restrictions:');\n    printValidationResults(validationResult.errors);\n    printValidationResults(validationResult.warnings);\n    process.exit(1);\n  }\n\n  // TODO: there should be a single place that holds the dependencies\n  var dependencies = ['react', 'react-dom'];\n  var devDependencies = ['react-scripts'];\n  var allDependencies = dependencies.concat(devDependencies).sort();\n  if (allDependencies.indexOf(appName) >= 0) {\n    console.error(\n      chalk.red(\n        'We cannot create a project called ' + chalk.green(appName) + ' because a dependency with the same name exists.\\n' +\n        'Due to the way npm works, the following names are not allowed:\\n\\n'\n      ) +\n      chalk.cyan(\n        allDependencies.map(function(depName) {\n          return '  ' + depName;\n        }).join('\\n')\n      ) +\n      chalk.red('\\n\\nPlease choose a different project name.')\n    );\n    process.exit(1);\n  }\n}\n\nfunction makeCaretRange(dependencies, name) {\n  var version = dependencies[name];\n\n  if (typeof version === 'undefined') {\n    console.error(\n      chalk.red('Missing ' + name + ' dependency in package.json')\n    );\n    process.exit(1);\n  }\n\n  var patchedVersion = '^' + version;\n\n  if (!semver.validRange(patchedVersion)) {\n    console.error(\n      'Unable to patch ' + name + ' dependency version because version ' + chalk.red(version) + ' will become invalid ' + chalk.red(patchedVersion)\n    );\n    patchedVersion = version;\n  }\n\n  dependencies[name] = patchedVersion;\n}\n\nfunction fixDependencies(packageName) {\n  var packagePath = path.join(process.cwd(), 'package.json');\n  var packageJson = require(packagePath);\n\n  if (typeof packageJson.dependencies === 'undefined') {\n    console.error(\n      chalk.red('Missing dependencies in package.json')\n    );\n    process.exit(1);\n  }\n\n  var packageVersion = packageJson.dependencies[packageName];\n\n  if (typeof packageVersion === 'undefined') {\n    console.error(\n      chalk.red('Unable to find ' + packageName + ' in package.json')\n    );\n    process.exit(1);\n  }\n\n  packageJson.devDependencies = packageJson.devDependencies || {};\n  packageJson.devDependencies[packageName] = packageVersion;\n  delete packageJson.dependencies[packageName];\n\n  makeCaretRange(packageJson.dependencies, 'react');\n  makeCaretRange(packageJson.dependencies, 'react-dom');\n\n  fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2));\n}\n\n// If project only contains files generated by GH, it’s safe.\n// We also special case IJ-based products .idea because it integrates with CRA:\n// https://github.com/facebookincubator/create-react-app/pull/368#issuecomment-243446094\nfunction isSafeToCreateProjectIn(root) {\n  var validFiles = [\n    '.DS_Store', 'Thumbs.db', '.git', '.gitignore', '.idea', 'README.md', 'LICENSE', 'web.iml'\n  ];\n  return fs.readdirSync(root)\n    .every(function(file) {\n      return validFiles.indexOf(file) >= 0;\n    });\n}\n\nfunction checkIfOnline(useYarn) {\n  if (!useYarn) {\n    // Don't ping the Yarn registry.\n    // We'll just assume the best case.\n    return Promise.resolve(true);\n  }\n\n  return new Promise(function(resolve) {\n    dns.resolve('registry.yarnpkg.com', function(err) {\n      resolve(err === null);\n    });\n  });\n}\n"}